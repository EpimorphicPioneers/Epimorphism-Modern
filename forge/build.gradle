plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

String getConfig(String key) {
    return project.getParent().properties.get(key)
}

def mod_id = getConfig("mod_id")
def common_project = project(":common")
def version = getConfig("version")
def mod_license = getConfig("mod_license")
def mod_name = getConfig("mod_name")
def mod_description = getConfig("mod_description")
def mod_url = getConfig("mod_url")

static def isJetBrainsRuntime() {
    return System.getProperty('java.vm.vendor').contains('JetBrains')
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        mixinConfig(
                "${mod_id}-common.mixins.json",
                "${mod_id}.mixins.json",
        )

        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        dataGen{
            mod(mod_id)
        }
    }

    runConfigs.named("data").configure {
        programArg("--existing=" + common_project.file("src/main/resources").absolutePath)
    }

    if (isJetBrainsRuntime()) {
        runs {
            client {
                vmArgs '-XX:+AllowEnhancedClassRedefinition'
                vmArgs '-XX:HotswapAgent=fatjar'
            }
        }
    }
    runs {
        create("gameTestServer") {
            server()
            name("Minecraft Game Test")
            source("main")

            property("forge.enabledGameTestNamespaces", mod_id)
            property("forge.gameTestServer", "true")

            mods {
                create(mod_id) {
                    sourceSet("main")
                }
            }
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    apiElements {
        outgoing {
            capability("net.minecraftforge:forge:${this.forge.versions.minecratfForge.get()}")
            capability("com.lowdragmc.ldlib:ldlib-forge-${this.libs.versions.minecraft.get()}:${this.forge.versions.ldlib.get()}")
            capability("com.tterrag.registrate:Registrate:${this.forge.versions.registrate.get()}")
            capability("dev.toma.configuration:configuration-forge-${this.libs.versions.minecraft.get()}:${this.forge.versions.configuration.get()}")
            capability("io.github.llamalad7:mixinextras-forge:${this.forge.versions.mixinextras.get()}")
        }
    }
}

repositories {
    // mavens for Forge-exclusives
    maven { url = "https://maven.theillusivec4.top/" } // Curios
    maven { url = "https://maven.parchmentmc.org" } // Parchment mappings
    maven { url = "https://maven.quiltmc.org/repository/release" } // Quilt Mappings
    maven { // TOP
        url "https://maven.k-4u.nl"
    }
    maven {
        // saps.dev Maven (KubeJS and Rhino)
        url = "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.latvian.mods"
        }
    }
    maven { url 'https://jitpack.io' } // Mixin Extras, Fabric ASM
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    // LDLib
    modImplementation(forge.ldlib.forge) { transitive = false }
    include(forge.ldlib.forge)

    // Registrate
    modImplementation(include("com.tterrag.registrate:Registrate:${forge.versions.registrate.get()}"))

    // Create and its dependencies
    modImplementation("com.simibubi.create:create-${libs.versions.minecraft.get()}:${forge.versions.createForge.get()}:all") { transitive = false }
    modImplementation forge.flywheel

    // JEI
    modCompileOnly(forge.jei.common.api) { transitive = false }
    modCompileOnly(forge.jei.forge.api) { transitive = false }
    modCompileOnly(forge.jei.forge.impl) { transitive = false }

    // REI
    modCompileOnly forge.rei.plugin
    modCompileOnly forge.rei.api
    modImplementation forge.rei.forge

    // EMI
    modCompileOnly("dev.emi:emi-forge:${fabric.versions.emi.get()}:api")
    modCompileOnly forge.emi

    // TOP
    modCompileOnly(forge.theoneprobe) { transitive = false }

    // Jade
    modImplementation(forge.jade)

    // AE2
    modImplementation(forge.ae2) { transitive = false }

    //AlmostUnified
    modImplementation(forge.almostUnified.forge)

    // KJS
    modImplementation forge.kubejs

    // Mixin Extras
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:${this.forge.versions.mixinextras.get()}"))
    implementation(include("io.github.llamalad7:mixinextras-forge:${this.forge.versions.mixinextras.get()}"))

    // Configuration
    modImplementation(forge.configuration)
    include(forge.configuration)

    // Shimmer
    modImplementation(forge.shimmer.forge) { transitive = false }
    modImplementation("maven.modrinth:embeddium:0.2.10+mc1.20.1")
    modImplementation("maven.modrinth:oculus:1.20.1-1.6.9")

    // GTM
    modImplementation("maven.modrinth:gregtechceu-modern:mc1.20.1-1.0.16-forge")

    // Runtime only testing mods
    //modRuntimeOnly(forge.worldStripper)
}

processResources {
    // set up properties for filling into metadata
    Map<String, String> properties = Map.of(
            "version", version,
            "mod_id", mod_id,
            "forge_version", forge.versions.forgeShortVersion.get().split("\\.")[0], // only specify major version of forge
            "minecraft_version", libs.versions.minecraft.get(),
            "mod_license", mod_license,
            "mod_name", mod_name,
            "mod_description", mod_description,
            "mod_url", mod_url
    )
    properties.forEach((k, v) -> inputs.property(k, v))

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = null
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
